>>> from scapy.all import *
>>> lsc()
IPID_count          : Identify IP id values classes in a list of packets
arpcachepoison      : Poison target's cache with (your MAC,victim's IP) couple
arping              : Send ARP who-has requests to determine which hosts are up
arpleak             : Exploit ARP leak flaws, like NetBSD-SA2017-002.
bind_layers         : Bind 2 layers on some specific fields' values. It makes the packet being built  # noqa: E501
bridge_and_sniff    : Forward traffic between interfaces if1 and if2, sniff and return
chexdump            : Build a per byte hexadecimal representation
computeNIGroupAddr  : Compute the NI group Address. Can take a FQDN as input parameter
corrupt_bits        : Flip a given percentage or number of bits from a string
corrupt_bytes       : Corrupt a given percentage or number of bytes from a string
defrag              : defrag(plist) -> ([not fragmented], [defragmented],
defragment          : defragment(plist) -> plist defragmented as much as possible
dhcp_request        : Send a DHCP discover request and return the answer
dyndns_add          : Send a DNS add message to a nameserver for "name" to have a new "rdata"
dyndns_del          : Send a DNS delete message to a nameserver for "name"
etherleak           : Exploit Etherleak flaw
explore             : Function used to discover the Scapy layers and protocols.
fletcher16_checkbytes: Calculates the Fletcher-16 checkbytes returned as 2 byte binary-string.
fletcher16_checksum : Calculates Fletcher-16 checksum of the given buffer.
fragleak            : --
fragleak2           : --
fragment            : Fragment a big IP datagram
fuzz                : Transform a layer into a fuzzy layer by replacing some default values by random objects
getmacbyip          : Return MAC address corresponding to a given IP address
getmacbyip6         : Returns the MAC address corresponding to an IPv6 address
hexdiff             : Show differences between 2 binary strings
hexdump             : Build a tcpdump like hexadecimal view
hexedit             : Run hexedit on a list of packets, then return the edited packets.
hexstr              : Build a fancy tcpdump like hex from bytes.
import_hexcap       : Imports a tcpdump like hexadecimal view
is_promisc          : Try to guess if target is in Promisc mode. The target is provided by its ip.
linehexdump         : Build an equivalent view of hexdump() on a single line
ls                  : List  available layers, or infos on a given layer class or name.
neighsol            : Sends and receive an ICMPv6 Neighbor Solicitation message
overlap_frag        : Build overlapping fragments to bypass NIPS
promiscping         : Send ARP who-has requests to determine which hosts are in promiscuous mode
rdpcap              : Read a pcap or pcapng file and return a packet list
report_ports        : portscan a target and output a LaTeX table
restart             : Restarts scapy
send                : Send packets at layer 3
sendp               : Send packets at layer 2
sendpfast           : Send packets at layer 2 using tcpreplay for performance
sniff               : Sniff packets and return a list of packets.
split_layers        : Split 2 layers previously bound.
sr                  : Send and receive packets at layer 3
sr1                 : Send packets at layer 3 and return only the first answer
sr1flood            : Flood and receive packets at layer 3 and return only the first answer
srbt                : send and receive using a bluetooth socket
srbt1               : send and receive 1 packet using a bluetooth socket
srflood             : Flood and receive packets at layer 3
srloop              : Send a packet at layer 3 in loop and print the answer each time
srp                 : Send and receive packets at layer 2
srp1                : Send and receive packets at layer 2 and return only the first answer
srp1flood           : Flood and receive packets at layer 2 and return only the first answer
srpflood            : Flood and receive packets at layer 2
srploop             : Send a packet at layer 2 in loop and print the answer each time
tcpdump             : Run tcpdump or tshark on a list of packets
traceroute          : Instant TCP traceroute
traceroute6         : Instant TCP traceroute using IPv6
traceroute_map      : Util function to call traceroute on multiple targets, then
tshark              : Sniff packets and print them calling pkt.summary(), a bit like text wireshark
wireshark           : Run wireshark on a list of packets
wrpcap              : Write a list of packets to a pcap file
>>> pkt = sniff(count=1)
>>> pkt[0].summary()
'Ether / IP / UDP 192.168.0.108:46152 > 239.255.255.250:1900 / Raw'
>>> pkt[0].show()
###[ Ethernet ]###
  dst       = 01:00:5e:7f:ff:fa
  src       = f8:63:3f:18:3a:17
  type      = 0x800
###[ IP ]###
     version   = 4
     ihl       = 5
     tos       = 0x0
     len       = 199
     id        = 65266
     flags     = DF
     frag      = 0
     ttl       = 1
     proto     = udp
     chksum    = 0xc924
     src       = 192.168.0.108
     dst       = 239.255.255.250
     \options   \
###[ UDP ]###
        sport     = 46152
        dport     = 1900
        len       = 179
        chksum    = 0xc4e8
###[ Raw ]###
           load      = 'M-SEARCH * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nMAN: "ssdp:discover"\r\nMX: 1\r\nST: urn:dial-multiscreen-org:service:dial:1\r\nUSER-AGENT: Google Chrome/68.0.3440.75 Linux\r\n\r\n'

>>> ls()
>>> ls(Ether)
dst        : DestMACField                        = (None)
src        : SourceMACField                      = (None)
type       : XShortEnumField                     = (36864)
>>> ls(IP)
version    : BitField (4 bits)                   = (4)
ihl        : BitField (4 bits)                   = (None)
tos        : XByteField                          = (0)
len        : ShortField                          = (None)
id         : ShortField                          = (1)
flags      : FlagsField (3 bits)                 = (<Flag 0 ()>)
frag       : BitField (13 bits)                  = (0)
ttl        : ByteField                           = (64)
proto      : ByteEnumField                       = (0)
chksum     : XShortField                         = (None)
src        : SourceIPField                       = (None)
dst        : DestIPField                         = (None)
options    : PacketListField                     = ([])
>>> ls(UDP)
sport      : ShortEnumField                      = (53)
dport      : ShortEnumField                      = (53)
len        : ShortField                          = (None)
chksum     : XShortField                         = (None)
>>> pkts = sniff(count=10)
>>> pkt.summary()
Ether / IP / UDP 192.168.0.108:46152 > 239.255.255.250:1900 / Raw
>>> pkts.summary()
Ether / IP / TCP 192.168.0.108:44138 > 203.252.15.151:https A
Ether / IP / TCP 203.252.15.151:https > 192.168.0.108:44138 A
Ether / IPv6 / UDP / DNS Qry "b'_pgpkey-hkp._tcp.local.'"
Ether / IP / UDP / DNS Qry "b'_pgpkey-hkp._tcp.local.'"
Ether / IP / UDP 74.125.203.189:443 > 192.168.0.108:42720 / Raw
Ether / IP / UDP 192.168.0.108:42720 > 74.125.203.189:443 / Raw
Ether / IP / UDP 192.168.0.108:45544 > 172.217.25.3:443 / Raw
Ether / IP / UDP 172.217.25.3:443 > 192.168.0.108:45544 / Raw
Ether / IP / UDP / DNS Qry "b'connectivity-check.ubuntu.com.'"
Ether / IP / UDP / DNS Ans "35.224.99.156"
>>> pkts[3]
<Ether  dst=01:00:5e:00:00:fb src=00:c2:c6:44:f8:63 type=0x800 |<IP  version=4 ihl=5 tos=0x0 len=68 id=2519 flags=DF frag=0 ttl=255 proto=udp chksum=0xcfc2 src=192.168.0.107 dst=224.0.0.251 |<UDP  sport=mdns dport=mdns len=48 chksum=0x2482 |<DNS  id=0 qr=0 opcode=QUERY aa=0 tc=0 rd=0 ra=0 z=0 ad=0 cd=0 rcode=ok qdcount=1 ancount=0 nscount=0 arcount=0 qd=<DNSQR  qname='_pgpkey-hkp._tcp.local.' qtype=PTR qclass=IN |> an=None ns=None ar=None |>>>>
>>> pkts[6][UDP].summary()
'UDP 192.168.0.108:45544 > 172.217.25.3:443 / Raw'
>>>
